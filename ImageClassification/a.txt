# encoding: utf-8
import os, cv2
import xml.etree.ElementTree as ET
cls_names = []
cls_nums = []
with open('defect.txt', 'w') as f:
    with open('train.txt', 'w') as ftrain:
        for par, dirs, files in os.walk('./'):
            for file in files:
                if file[-4:] == '.xml' and os.path.exists(os.path.join(par, file[:-4] + '.jpg')):
                    f.write('{}\n'.format(os.path.join(par, file[:-4])))
                    tree = ET.parse(os.path.join(par, file))
                    im = cv2.imread(os.path.join(par, file[:-4] + '.jpg'))
                    cv2.imwrite('train_defects_im/{}.jpg'.format(file[:-4]).replace(' ', '_'), im)
                    objs = tree.findall('object')
                    for ix, obj in enumerate(objs):
                        cls_name = obj.find('name').text
                        if cls_name not in cls_names:
                            cls_names.append(cls_name)
                            cls_nums.append(1)
                        else:
                            cls_nums[cls_names.index(cls_name)] += 1
                        obj.find('name').text = 'id_{}'.format(cls_names.index(cls_name))
                        bbox = obj.find('bndbox')
                        # print unicode(cls_name, encoding="utf-8")
                        x1 = int(bbox.find('xmin').text) - 1
                        y1 = int(bbox.find('ymin').text) - 1
                        x2 = int(bbox.find('xmax').text) - 1
                        y2 = int(bbox.find('ymax').text) - 1
                        cv2.rectangle(im, (x1,y1), (x2,y2), (255,0,0),2)
                        cv2.putText(im,'id:{}'.format(cls_names.index(cls_name)),(x1,y1-10),cv2.FONT_HERSHEY_COMPLEX,2,(0,0,255),1)
                    tree.write('new_anno/{}'.format(file.replace(' ', '_')),  xml_declaration=True)
                    cv2.imwrite('show_defects_im/{}.jpg'.format(file[:-4]).replace(' ', '_'), im)
                    ftrain.write('{}\n'.format(file[:-4].replace(' ', '_')))
with open('cls_name.txt', 'w') as f:
    for i in range(len(cls_names)):
        f.write('id:{}\t{}\t{}\n'.format(i, cls_names[i].encode('utf-8'), cls_nums[i]))
        
        
        
# encoding: utf-8
import cv2, os, random
import xml.etree.ElementTree as ET

ANNO_DIR = 'new_anno/'
IM_DIR = 'train_defects_im/'
PATCH_DIR = 'patch/'
PATCH_SIZE = 256
def create_patch(im, obj, im_shape, im_name, obj_id):
    cls_name = obj.find('name').text
    save_dir = os.path.join(PATCH_DIR, cls_name)
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)
    bbox = obj.find('bndbox')
    x1 = int(bbox.find('xmin').text) - 1
    y1 = int(bbox.find('ymin').text) - 1
    x2 = int(bbox.find('xmax').text) - 1
    y2 = int(bbox.find('ymax').text) - 1
    xstart = x1 - random.randint(20, 100)
    ystart = y1 - random.randint(20, 100)
    xend = x2 + random.randint(20, 100)
    yend = y2 + random.randint(20, 100)
    xstart = xstart if xstart > 0 else 0
    ystart = ystart if ystart > 0 else 0
    xend = xend if xend < im_shape[1] else im_shape[1]
    yend = yend if yend < im_shape[0] else im_shape[0]
    x = xstart
    y = ystart
    patch_id = 0
    while x < xend and y < yend:
        cv2.imwrite(os.path.join(save_dir, '{}_{}_{}.jpg'.format(im_name, obj_id, patch_id)),im[y:y + PATCH_SIZE, x:x + PATCH_SIZE])
        if x + 200 > xend:
            if patch_id < 1:
                x += random.randint(-20, 20)
            else:
                x += random.randint(0, 20)
        else:
            x += random.randint(20, 100)
        if y + 200 > yend:
            if patch_id < 1:
                y += random.randint(-20, 20)
            else:
                y += random.randint(0, 20)
        else:
            y += random.randint(20, 100)
        patch_id += 1




if __name__ == '__main__':
    for im_name in os.listdir(IM_DIR):
        if im_name.endswith('.jpg'):
            anno_name = os.path.join(ANNO_DIR, im_name.replace('jpg', 'xml'))
            assert os.path.isfile(anno_name), anno_name
            tree = ET.parse(anno_name)
            im = cv2.imread(os.path.join(IM_DIR,im_name))
            im_shape = im.shape
            objs = tree.findall('object')
            obj_id = 0
            for ix, obj in enumerate(objs):
                create_patch(im, obj, im_shape, im_name[:-4], obj_id)
                obj_id += 1
